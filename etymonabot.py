import os
import openai
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import BotCommand
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Set up logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
openai.api_key = OPENAI_API_KEY

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
async def set_bot_commands(dp):
    await dp.bot.set_my_commands([
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand("explain", "–û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ"),
        BotCommand("cards", "–ö–∞—Ä—Ç–æ—á–∫–∏: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏ –≥—Ä–µ—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ"),
        BotCommand("quiz", "–ù–µ–±–æ–ª—å—à–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ª–æ–≤–∞–º")
    ])

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø Etymonabot ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –æ–ª–∏–º–ø–∏–∞–¥–µ –ø–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–µ.\n\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /explain –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ª—é–±–æ–µ —Å–ª–æ–≤–æ.")

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
class ExplainWord(StatesGroup):
    waiting_for_word = State()

# –ö–æ–º–∞–Ω–¥–∞ /explain –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥
@dp.message_handler(commands=['explain'])
async def start_explain(message: types.Message):
    await message.reply("–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å?")
    await ExplainWord.waiting_for_word.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –∞–Ω–∞–ª–∏–∑
@dp.message_handler(state=ExplainWord.waiting_for_word)
async def explain_word_fsm(message: types.Message, state: FSMContext):
    query = message.text.strip()
    await message.reply("üîé –î—É–º–∞—é –Ω–∞–¥ —Å–ª–æ–≤–æ–º: " + query)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –ª–∏–Ω–≥–≤–∏—Å—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–º –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–º –≤—É–∑–µ. "
                        "–û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤-—Ñ–∏–ª–æ–ª–æ–≥–æ–≤. "
                        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –¥–µ–ª–∞–π –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä:\n"
                        "‚Äî –º–æ—Ä—Ñ–µ–º–Ω—ã–π —Å–æ—Å—Ç–∞–≤ (–æ–±–æ–∑–Ω–∞—á—å –∫–æ—Ä–µ–Ω—å, —Å—É—Ñ—Ñ–∏–∫—Å—ã, –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å);\n"
                        "‚Äî —ç—Ç–∏–º–æ–ª–æ–≥–∏—é: –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, –ø—É—Ç—å –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤ –∏ —Ñ–æ—Ä–º);\n"
                        "‚Äî —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å–¥–≤–∏–≥–∏ –∑–Ω–∞—á–µ–Ω–∏–π;\n"
                        "‚Äî —Ç–∏–ø –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ (–∫–Ω–∏–∂–Ω–æ–µ, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ –∏ —Ç.–¥.);\n"
                        "‚Äî –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–§–∞—Å–º–µ—Ä, –ö–ª–µ–π–Ω, TLFi, Duden –∏ –¥—Ä.).\n"
                        "–ü–∏—à–∏ –∫–∞–∫ –ª–∏–Ω–≥–≤–∏—Å—Ç-—Ñ–∏–ª–æ–ª–æ–≥, –Ω–µ —É–ø—Ä–æ—â–∞–π."
                    )
                },
                {
                    "role": "user",
                    "content": f"–°–¥–µ–ª–∞–π —ç—Ç–∏–º–æ–ª–æ–≥–æ-–º–æ—Ä—Ñ–µ–º–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞: {query}"
                }
            ]
        )
        explanation = response['choices'][0]['message']['content']
        await message.reply(explanation)
    except Exception as e:
        logging.error(e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def handle_text(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /explain")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
async def on_startup(dp):
    await set_bot_commands(dp)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


