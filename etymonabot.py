import os
import openai
import logging
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Set up logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

# Start command
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø Etymonabot ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –æ–ª–∏–º–ø–∏–∞–¥–µ –ø–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–µ.\n\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–ª–æ–≤–æ, –∏ —è –æ–±—ä—è—Å–Ω—é –µ–≥–æ –º–æ—Ä—Ñ–µ–º–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∏ —ç—Ç–∏–º–æ–ª–æ–≥–∏—é.\n\n–ü–æ–ø—Ä–æ–±—É–π: /explain –¥–µ–∫–∞–±—Ä—å")

# Explain command
@dp.message_handler(commands=['explain'])
async def explain_word(message: types.Message):
    query = message.get_args()
    if not query:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /explain –¥–µ–∫–∞–±—Ä—å")
        return

    await message.reply("üîé –î—É–º–∞—é –Ω–∞–¥ —Å–ª–æ–≤–æ–º: " + query)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –∏ —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞."},
                {"role": "user", "content": f"–û–±—ä—è—Å–Ω–∏ –º–æ—Ä—Ñ–µ–º–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∏ —ç—Ç–∏–º–æ–ª–æ–≥–∏—é —Å–ª–æ–≤–∞ '{query}' –¥–ª—è —Å—Ç–∞—Ä—à–µ–∫–ª–∞—Å—Å–Ω–∏–∫–∞, –≥–æ—Ç–æ–≤—è—â–µ–≥–æ—Å—è –∫ –æ–ª–∏–º–ø–∏–∞–¥–µ –ø–æ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–µ. –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç–æ, –Ω–æ —Ç–æ—á–Ω–æ."}
            ]
        )
        explanation = response['choices'][0]['message']['content']
        await message.reply(explanation)
    except Exception as e:
        logging.error(e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# Fallback handler for any text
@dp.message_handler()
async def handle_text(message: types.Message):
    await message.reply("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —ç—Ç–∏–º–æ–ª–æ–≥–∏—é —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /explain <—Å–ª–æ–≤–æ>")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
