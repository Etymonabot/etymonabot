import os
import openai
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import BotCommand
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Set up logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
openai.api_key = OPENAI_API_KEY

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
class ExplainWord(StatesGroup):
    waiting_for_word = State()

@dp.message_handler(commands=['explain'])
async def start_explain(message: types.Message):
    await message.reply("–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å?")
    await ExplainWord.waiting_for_word.set()

@dp.message_handler(state=ExplainWord.waiting_for_word)
async def explain_word_fsm(message: types.Message, state: FSMContext):
    query = message.text.strip()
    await message.reply("üîé –î—É–º–∞—é –Ω–∞–¥ —Å–ª–æ–≤–æ–º: " + query)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –ª–∏–Ω–≥–≤–∏—Å—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–º –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–º –≤—É–∑–µ. –û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–∞–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤-—Ñ–∏–ª–æ–ª–æ–≥–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –¥–µ–ª–∞–π –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä:

‚Äî –º–æ—Ä—Ñ–µ–º–Ω—ã–π —Å–æ—Å—Ç–∞–≤ (–æ–±–æ–∑–Ω–∞—á—å –∫–æ—Ä–µ–Ω—å, —Å—É—Ñ—Ñ–∏–∫—Å—ã, –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å);
‚Äî —ç—Ç–∏–º–æ–ª–æ–≥–∏—é: –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ, –ø—É—Ç—å –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤ –∏ —Ñ–æ—Ä–º);
‚Äî —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ —Å–¥–≤–∏–≥–∏ –∑–Ω–∞—á–µ–Ω–∏–π;
‚Äî —Ç–∏–ø –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ (–∫–Ω–∏–∂–Ω–æ–µ, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–µ –∏ —Ç.–¥.);
‚Äî –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–§–∞—Å–º–µ—Ä, –ö–ª–µ–π–Ω, TLFi, Duden –∏ –¥—Ä.).

–ü–∏—à–∏ –∫–∞–∫ –ª–∏–Ω–≥–≤–∏—Å—Ç-—Ñ–∏–ª–æ–ª–æ–≥, –Ω–µ —É–ø—Ä–æ—â–∞–π.""
                },
                {
                    "role": "user",
                    "content": f"–°–¥–µ–ª–∞–π —ç—Ç–∏–º–æ–ª–æ–≥–æ-–º–æ—Ä—Ñ–µ–º–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞: {query}"
                }
            ]
        )
        explanation = response['choices'][0]['message']['content']
        await message.reply(explanation)
    except Exception as e:
        logging.error(e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    await state.finish()

cards_data = [
    {"number": 0, "latin": "nulla", "greek": "ouden", "examples": [], "examples_ru": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ 'nulla' ‚Äî –Ω–∏—á—Ç–æ"},
    {"number": 1, "latin": "unus", "greek": "heis", "examples": ["universe"], "examples_ru": ["—É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è"]},
    {"number": 2, "latin": "duo", "greek": "dyo", "examples": ["dual"], "examples_ru": ["–¥—É—ç—Ç"]},
    {"number": 3, "latin": "tres", "greek": "treis", "examples": ["triangle"], "examples_ru": ["—Ç—Ä–∏–æ"]},
    {"number": 4, "latin": "quattuor", "greek": "tettares", "examples": ["quadrant"], "examples_ru": ["–∫–≤–∞–¥—Ä–∞–Ω—Ç"]},
    {"number": 5, "latin": "quinque", "greek": "pente", "examples": ["pentagon"], "examples_ru": ["–ø–µ–Ω—Ç–∞—Ç–ª–æ–Ω"]},
    {"number": 6, "latin": "sex", "greek": "hex", "examples": ["sextet"], "examples_ru": ["–≥–µ–∫—Å–∞–¥–∞"]},
    {"number": 7, "latin": "septem", "greek": "hepta", "examples": ["September"], "examples_ru": ["–≥–µ–ø—Ç–æ–¥—Ä–æ–º"]},
    {"number": 8, "latin": "octo", "greek": "okto", "examples": ["octopus"], "examples_ru": ["–æ–∫—Ç–∞–≤–∞"]},
    {"number": 9, "latin": "novem", "greek": "ennea", "examples": ["November"], "examples_ru": ["—ç–Ω–Ω–µ–∞–≥–æ–Ω"]},
    {"number": 10, "latin": "decem", "greek": "deka", "examples": ["decimal"], "examples_ru": ["–¥–µ–∫–∞–¥–∞"]}
]

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
user_card_index = {}
user_quiz_index = {}
user_quiz_score = {}

@dp.message_handler(commands=['quiz'])
async def send_quiz_intro(message: types.Message):
    user_id = message.from_user.id
    user_quiz_index[user_id] = 0
    user_quiz_score[user_id] = 0
    await message.reply("üß† –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –Ω–∞–∑–æ–≤–∏ —á–∏—Å–ª–æ –ø–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –∏ –≥—Ä–µ—á–µ—Å–∫–æ–º—É –Ω–∞–ø–∏—Å–∞–Ω–∏—é. –û—Ç–ø—Ä–∞–≤—å —Ü–∏—Ñ—Ä—É –≤ –æ—Ç–≤–µ—Ç.")
    await send_quiz_card(message.chat.id, user_id)

async def send_first_card(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("0‚Äì10", callback_data="cards_0_10"),
        types.InlineKeyboardButton("10‚Äì20", callback_data="cards_10_20"),
    )
    keyboard.add(
        types.InlineKeyboardButton("20‚Äì100", callback_data="cards_20_100"),
        types.InlineKeyboardButton("100‚Äì1000", callback_data="cards_100_1000"),
    )
    await message.reply("–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and (c.data.startswith("cards_") or c.data == "back_to_menu"))
async def process_card_range(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    if data == "cards_0_10":
        user_card_index[user_id] = next(i for i, c in enumerate(cards_data) if c['number'] == 0)
    elif data == "cards_10_20":
        user_card_index[user_id] = next(i for i, c in enumerate(cards_data) if c['number'] == 10)
    elif data == "cards_20_100":
        user_card_index[user_id] = next(i for i, c in enumerate(cards_data) if c['number'] == 20)
    elif data == "cards_100_1000":
        user_card_index[user_id] = next(i for i, c in enumerate(cards_data) if c['number'] == 100)
    elif data == "back_to_menu":
        await send_first_card(callback_query.message)
        await callback_query.answer()
        return
    else:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞", callback_data="back_to_menu"))
    await callback_query.message.answer(format_card(cards_data[user_card_index[user_id]]), reply_markup=keyboard)
    await callback_query.answer()

@dp.message_handler(commands=['next'])
async def send_next_card(message: types.Message):
    user_id = message.from_user.id
    index = user_card_index.get(user_id, 0) + 1
    if index < len(cards_data):
        user_card_index[user_id] = index
        await message.reply(format_card(cards_data[index]))
    else:
        await message.reply("üéâ –≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞!")

async def send_quiz_card(chat_id, user_id):
    if user_quiz_index[user_id] >= len(cards_data):
        score = user_quiz_score[user_id]
        await bot.send_message(chat_id, f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢—ã –Ω–∞–±—Ä–∞–ª {score} –∏–∑ {len(cards_data)}.")
        return
    card = cards_data[user_quiz_index[user_id]]
    text = (
        f"üá±üá¶ –õ–∞—Ç–∏–Ω—Å–∫–æ–µ: {card['latin']}\n"
        f"üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–æ–µ: {card['greek']}\n\n"
        f"–°–∫–æ–ª—å–∫–æ —ç—Ç–æ? –í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—É."
    )
    await bot.send_message(chat_id, text)

@dp.message_handler(lambda message: message.text.isdigit())
async def check_quiz_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_quiz_index:
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã

    current_card = cards_data[user_quiz_index[user_id]]
    correct = str(current_card['number']) == message.text.strip()
    if correct:
        user_quiz_score[user_id] += 1
        await message.reply("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_card['number']}")

    user_quiz_index[user_id] += 1
    await send_quiz_card(message.chat.id, user_id)

def format_card(card):
    text = f"üî¢ {card['number']}\n"
    text += f"üá±üá¶ –õ–∞—Ç–∏–Ω—Å–∫–∏–π: {card['latin']}\n"
    text += f"üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∏–π: {card['greek']}\n"
    if card.get('note'):
        text += f"\nüìô –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:\n{card['note']}\n"
    if card.get('examples'):
        text += "\nüìò –ü—Ä–∏–º–µ—Ä—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö:\n"
        for ex in card['examples']:
            text += f"‚Ä¢ {ex}\n"
    if card.get('examples_ru'):
        text += "\nüìó –ü—Ä–∏–º–µ—Ä—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º:\n"
        for ex in card['examples_ru']:
            text += f"‚Ä¢ {ex}\n"
    text += "\n‚û°Ô∏è –ù–∞–ø–∏—à–∏ /next, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    return text

# –ó–∞–ø—É—Å–∫
async def on_startup(dp):
    await dp.bot.set_my_commands([
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand("explain", "–û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ"),
        BotCommand("cards", "–ö–∞—Ä—Ç–æ—á–∫–∏: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏ –≥—Ä–µ—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ"),
        BotCommand("quiz", "–ù–µ–±–æ–ª—å—à–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ª–æ–≤–∞–º")
    ])

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
