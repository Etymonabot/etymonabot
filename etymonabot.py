import os
import openai
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import BotCommand
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Set up logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
openai.api_key = OPENAI_API_KEY

# FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
class ExplainWord(StatesGroup):
    waiting_for_word = State()

@dp.message_handler(commands=['explain'])
async def start_explain(message: types.Message):
    await message.reply("–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å?")
    await ExplainWord.waiting_for_word.set()

@dp.message_handler(state=ExplainWord.waiting_for_word)
async def explain_word_fsm(message: types.Message, state: FSMContext):
    query = message.text.strip()
    await message.reply("üîé –î—É–º–∞—é –Ω–∞–¥ —Å–ª–æ–≤–æ–º: " + query)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                { "role": "system",
                    "content": """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ—Ä—Ñ–µ–º–∏–∫–µ –∏ —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
–†–∞–∑–±–∏—Ä–∞–π —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º –º–æ—Ä—Ñ–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:

‚Äî –£—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ –º–æ—Ä—Ñ–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–¥–µ–ª—è—é—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–Ω–∞ –±–∞–∑–µ —à–∫–æ–ª—å–Ω–æ–π –∏ –≤—É–∑–æ–≤—Å–∫–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏).
‚Äî –ï—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –º–æ—Ä—Ñ–µ–º—ã, –ø—Ä—è–º–æ —É–∫–∞–∑—ã–≤–∞–π: \"—Å–ª–æ–≤–æ –∏–º–µ–µ—Ç —Ü–µ–ª—å–Ω—É—é –Ω–µ—Ä–∞–∑–ª–æ–∂–∏–º—É—é –æ—Å–Ω–æ–≤—É\".
‚Äî –ù–µ –≤—ã–¥–µ–ª—è–π —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏–ª–∏ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤–∞—Ö.
‚Äî –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –º–æ—Ä—Ñ–µ–º–Ω–æ–µ —á–ª–µ–Ω–µ–Ω–∏–µ –ø–æ –∑–≤—É–∫—É, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª–æ–≤–µ \"–º–æ—Ä–∫–æ–≤—å\" –∫–æ—Ä–µ–Ω—å ‚Äî \"–º–æ—Ä–∫–æ–≤—å\", –∞ –Ω–µ \"–º–æ—Ä–∫-\").

–ü–æ—Å–ª–µ –º–æ—Ä—Ñ–µ–º–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ —ç—Ç–∏–º–æ–ª–æ–≥–∏—é: –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –ø—É—Ç—å –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏ —Å–¥–≤–∏–≥–∏ –∑–Ω–∞—á–µ–Ω–∏–π.

–ü–∏—à–∏ —Ç–æ—á–Ω–æ, –ª–∞–∫–æ–Ω–∏—á–Ω–æ –∏ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –ª–∏—Ä–∏–∫–∏.
"""
                },
                {
                    "role": "user",
                    "content": f"–°–¥–µ–ª–∞–π —ç—Ç–∏–º–æ–ª–æ–≥–æ-–º–æ—Ä—Ñ–µ–º–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å–ª–æ–≤–∞: {query}"
                }
            ]
        )
        explanation = response['choices'][0]['message']['content']
        await message.reply(explanation)
    except Exception as e:
        logging.error(e)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    await state.finish()

# Cards data
cards_data = [
      {"number": 1, "latin": "unus", "greek": "heis (Œµ·º∑œÇ)", "examples": ["unison", "uniform", "universe"], "examples_ru": ["—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "—É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è"]},
    {"number": 1, "latin": "unus", "greek": "heis (Œµ·º∑œÇ)", "examples": ["unison", "uniform", "universe"]},
    {"number": 2, "latin": "duo", "greek": "dyo (Œ¥œçŒø)", "examples": ["duet", "dual", "duplicate"], "examples_ru": ["–¥—É—ç—Ç", "–¥—É–ø–ª–µ–∫—Å"]},
    {"number": 3, "latin": "tres", "greek": "treis (œÑœÅŒµ·øñœÇ)", "examples": ["triangle", "trio", "triple"], "examples_ru": ["—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫", "—Ç—Ä–∏–æ"]},
    {"number": 4, "latin": "quattuor", "greek": "tessares (œÑŒ≠œÉœÉŒ±œÅŒµœÇ)", "examples": ["quartet", "quadrant", "tetrahedron"], "examples_ru": ["—á–µ—Ç–≤–µ—Ä—Ç—å", "—Ç–µ—Ç—Ä–∞—ç–¥—Ä"]},
    {"number": 5, "latin": "quinque", "greek": "pente (œÄŒ≠ŒΩœÑŒµ)", "examples": ["pentagon", "pentathlon", "quintet"], "examples_ru": ["–ø–µ–Ω—Ç–∞–≥–æ–Ω", "–ø–µ–Ω—Ç–∞—Ç–ª–æ–Ω"]},
    {"number": 6, "latin": "sex", "greek": "hex (·ºïŒæ)", "examples": ["hexagon", "sextet", "sextuple"], "examples_ru": ["–≥–µ–∫—Å–∞—ç–¥—Ä", "–≥–µ–∫—Å–∞–≥–æ–Ω"]},
    {"number": 7, "latin": "septem", "greek": "hepta (·ºëœÄœÑŒ¨)", "examples": ["September", "heptagon", "heptathlon"], "examples_ru": ["—Å–µ–Ω—Ç—è–±—Ä—å", "–≥–µ–ø—Ç–∞–≥–æ–Ω"]},
    {"number": 8, "latin": "octo", "greek": "okto (·ΩÄŒ∫œÑœé)", "examples": ["octopus", "octagon", "October"], "examples_ru": ["–æ–∫—Ç—è–±—Ä—å", "–æ–∫—Ç–∞—ç–¥—Ä"]},
    {"number": 9, "latin": "novem", "greek": "ennea (·ºêŒΩŒΩŒ≠Œ±)", "examples": ["nonagon", "enneagram", "November"], "examples_ru": ["–Ω–æ—è–±—Ä—å"]},
    {"number": 10, "latin": "decem", "greek": "deka (Œ¥Œ≠Œ∫Œ±)", "examples": ["decimal", "decade", "decagon"], "examples_ru": ["–¥–µ—Å—è—Ç–æ–∫", "–¥–µ–∫–∞–¥–∞"]},
    {"number": 11, "latin": "undecim", "greek": "hendeka (·ºïŒΩŒ¥ŒµŒ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: unus (–æ–¥–∏–Ω) + decem (–¥–µ—Å—è—Ç—å); –≥—Ä–µ—á–µ—Å–∫–æ–µ: heis (–æ–¥–∏–Ω) + deka (–¥–µ—Å—è—Ç—å)."},
    {"number": 12, "latin": "duodecim", "greek": "dodeka (Œ¥œéŒ¥ŒµŒ∫Œ±)", "examples": ["dodecahedron"], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: duo (–¥–≤–∞) + decem (–¥–µ—Å—è—Ç—å); –≥—Ä–µ—á–µ—Å–∫–æ–µ: dyo (–¥–≤–∞) + deka (–¥–µ—Å—è—Ç—å)."},
    {"number": 13, "latin": "tredecim", "greek": "triskaideka (œÑœÅŒπœÉŒ∫Œ±ŒØŒ¥ŒµŒ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: tres (—Ç—Ä–∏) + decem (–¥–µ—Å—è—Ç—å); –≥—Ä–µ—á–µ—Å–∫–æ–µ: treis (—Ç—Ä–∏) + deka (–¥–µ—Å—è—Ç—å)."},
    {"number": 14, "latin": "quattuordecim", "greek": "tetrakaideka (œÑŒµœÑœÅŒ±Œ∫Œ±ŒπŒ¥Œ≠Œ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: quattuor (—á–µ—Ç—ã—Ä–µ) + decem; –≥—Ä–µ—á–µ—Å–∫–æ–µ: tessares (—á–µ—Ç—ã—Ä–µ) + deka (–¥–µ—Å—è—Ç—å)."},
    {"number": 15, "latin": "quindecim", "greek": "pentekaideka (œÄŒµŒΩœÑŒµŒ∫Œ±ŒπŒ¥Œ≠Œ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: quinque (–ø—è—Ç—å) + decem; –≥—Ä–µ—á–µ—Å–∫–æ–µ: pente (–ø—è—Ç—å) + deka."},
    {"number": 16, "latin": "sedecim", "greek": "hexakaideka (·ºëŒæŒ±Œ∫Œ±ŒπŒ¥Œ≠Œ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: sex (—à–µ—Å—Ç—å) + decem; –≥—Ä–µ—á–µ—Å–∫–æ–µ: hex (—à–µ—Å—Ç—å) + deka."},
    {"number": 17, "latin": "septendecim", "greek": "heptakaideka (·ºëœÄœÑŒ±Œ∫Œ±ŒπŒ¥Œ≠Œ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: septem (—Å–µ–º—å) + decem; –≥—Ä–µ—á–µ—Å–∫–æ–µ: hepta (—Å–µ–º—å) + deka."},
    {"number": 18, "latin": "duodeviginti", "greek": "oktokaideka (·ΩÄŒ∫œÑœâŒ∫Œ±ŒπŒ¥Œ≠Œ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: duo (–¥–≤–∞) –æ—Ç –¥–≤–∞–¥—Ü–∞—Ç–∏ ‚Äî 20‚àí2; –≥—Ä–µ—á–µ—Å–∫–æ–µ: okto (–≤–æ—Å–µ–º—å) + deka."},
    {"number": 19, "latin": "undeviginti", "greek": "enneakaideka (·ºêŒΩŒΩŒµŒ±Œ∫Œ±ŒπŒ¥Œ≠Œ∫Œ±)", "examples": [], "note": "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ: unus (–æ–¥–∏–Ω) –æ—Ç –¥–≤–∞–¥—Ü–∞—Ç–∏ ‚Äî 20‚àí1; –≥—Ä–µ—á–µ—Å–∫–æ–µ: ennea (–¥–µ–≤—è—Ç—å) + deka."},
    {"number": 20, "latin": "viginti", "greek": "eikosi (Œµ·º¥Œ∫ŒøœÉŒπ)", "examples": ["icosahedron"]},
    {"number": 30, "latin": "triginta", "greek": "triakonta (œÑœÅŒπŒ¨Œ∫ŒøŒΩœÑŒ±)", "examples": [], "note": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–æ –æ—Ç –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ 'tres' (—Ç—Ä–∏) + —Å—É—Ñ—Ñ–∏–∫—Å -ginta; –≥—Ä–µ—á–µ—Å–∫–æ–µ 'triakonta' ‚Äî –æ—Ç 'treis' (—Ç—Ä–∏) + 'deka' (–¥–µ—Å—è—Ç—å) –≤ —Å–ª–æ–∂–Ω–æ–π —Ñ–æ—Ä–º–µ."},
    {"number": 40, "latin": "quadraginta", "greek": "tessarakonta (œÑŒµœÉœÉŒ±œÅŒ¨Œ∫ŒøŒΩœÑŒ±)", "examples": [], "note": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–æ –æ—Ç 'quattuor' (—á–µ—Ç—ã—Ä–µ) + —Å—É—Ñ—Ñ–∏–∫—Å -ginta; –≥—Ä–µ—á–µ—Å–∫–æ–µ 'tessarakonta' ‚Äî –æ—Ç 'tessares' (—á–µ—Ç—ã—Ä–µ) + 'deka'."},
    {"number": 50, "latin": "quinquaginta", "greek": "pentekonta (œÄŒµŒΩœÑŒÆŒ∫ŒøŒΩœÑŒ±)", "examples": [], "note": "–û—Ç 'quinque' (–ø—è—Ç—å) + -ginta; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'pente' (–ø—è—Ç—å) + 'deka'."},
    {"number": 60, "latin": "sexaginta", "greek": "hexekonta (·ºëŒæŒÆŒ∫ŒøŒΩœÑŒ±)", "examples": [], "note": "–û—Ç 'sex' (—à–µ—Å—Ç—å) + -ginta; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî 'hex' (—à–µ—Å—Ç—å) + 'deka'."},
    {"number": 70, "latin": "septuaginta", "greek": "hebdomƒìkonta (·ºëŒ≤Œ¥ŒøŒºŒÆŒ∫ŒøŒΩœÑŒ±)", "examples": [], "note": "–û—Ç 'septem' (—Å–µ–º—å) + -ginta; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'hepta' (—Å–µ–º—å) + 'deka'."},
    {"number": 80, "latin": "octoginta", "greek": "ogdoekonta (·ΩÄŒ≥Œ¥ŒøŒÆŒ∫ŒøŒΩœÑŒ±)", "examples": [], "note": "–û—Ç 'octo' (–≤–æ—Å–µ–º—å) + -ginta; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'okto' (–≤–æ—Å–µ–º—å) + 'deka'."},
    {"number": 90, "latin": "nonaginta", "greek": "enenƒìkonta (·ºêŒΩŒµŒΩŒÆŒ∫ŒøŒΩœÑŒ±)", "examples": [], "note": "–û—Ç 'novem' (–¥–µ–≤—è—Ç—å) + -ginta; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'ennea' (–¥–µ–≤—è—Ç—å) + 'deka'."},
    {"number": 100, "latin": "centum", "greek": "hekaton (·ºëŒ∫Œ±œÑœåŒΩ)", "examples": ["percent", "hecatomb"], "examples_ru": ["–ø—Ä–æ—Ü–µ–Ω—Ç", "—Ü–µ–Ω—Ç—É—Ä–∏—è"]},
    {"number": 200, "latin": "ducenti", "greek": "diakosia (Œ¥ŒπŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'duo' (–¥–≤–∞) + 'centi' (—Å–æ—Ç–Ω–∏); –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî 'dyo' (–¥–≤–∞) + 'hekaton' (—Å—Ç–æ)."},
    {"number": 300, "latin": "trecenti", "greek": "triakosia (œÑœÅŒπŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'tres' (—Ç—Ä–∏) + 'centi'; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'treis' (—Ç—Ä–∏) + 'hekaton'."},
    {"number": 400, "latin": "quadringenti", "greek": "tetrakosia (œÑŒµœÑœÅŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'quattuor' (—á–µ—Ç—ã—Ä–µ) + 'centi'; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'tessares' (—á–µ—Ç—ã—Ä–µ) + 'hekaton'."},
    {"number": 500, "latin": "quingenti", "greek": "pentakosia (œÄŒµŒΩœÑŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'quinque' (–ø—è—Ç—å) + 'centi'; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'pente' (–ø—è—Ç—å) + 'hekaton'."},
    {"number": 600, "latin": "sescenti", "greek": "hexakosia (·ºëŒæŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'sex' (—à–µ—Å—Ç—å) + 'centi'; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'hex' (—à–µ—Å—Ç—å) + 'hekaton'."},
    {"number": 700, "latin": "septingenti", "greek": "heptakosia (·ºëœÄœÑŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'septem' (—Å–µ–º—å) + 'centi'; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'hepta' (—Å–µ–º—å) + 'hekaton'."},
    {"number": 800, "latin": "octingenti", "greek": "oktakosia (·ΩÄŒ∫œÑŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'octo' (–≤–æ—Å–µ–º—å) + 'centi'; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'okto' (–≤–æ—Å–µ–º—å) + 'hekaton'."},
    {"number": 900, "latin": "nongenti", "greek": "enneakosia (·ºêŒΩŒΩŒµŒ±Œ∫œåœÉŒπŒ±)", "examples": [], "note": "–û—Ç 'novem' (–¥–µ–≤—è—Ç—å) + 'centi'; –≥—Ä–µ—á–µ—Å–∫–æ–µ ‚Äî –æ—Ç 'ennea' (–¥–µ–≤—è—Ç—å) + 'hekaton'."}
    {"number": 1000, "latin": "mille", "greek": "chilia (œáŒØŒªŒπŒ±)", "examples": ["millennium", "millimeter"], "examples_ru": ["–º–∏–ª–ª–∏–º–µ—Ç—Ä", "–º–∏–ª–ª–∏–æ–Ω"]}
]

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
user_card_index = {}

@dp.message_handler(commands=['cards'])
async def send_first_card(message: types.Message):
    user_card_index[message.from_user.id] = 0
    card = cards_data[0]
    await message.reply(format_card(card))

@dp.message_handler(commands=['next'])
async def send_next_card(message: types.Message):
    user_id = message.from_user.id
    index = user_card_index.get(user_id, 0) + 1
    if index < len(cards_data):
        user_card_index[user_id] = index
        await message.reply(format_card(cards_data[index]))
    else:
        await message.reply("üéâ –≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞!")


def format_card(card):
    text = f"üî¢ {card['number']}\n"
    text += f"üá±üá¶ –õ–∞—Ç–∏–Ω—Å–∫–∏–π: {card['latin']}\n"
    text += f"üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∏–π: {card['greek']}\n"
    if card['examples']:
        text += "\nüìò –ü—Ä–∏–º–µ—Ä—ã:\n"
        for ex in card['examples']:
            text += f"‚Ä¢ {ex}\n"
    text += "\n‚û°Ô∏è –ù–∞–ø–∏—à–∏ /next, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    return text

# –ó–∞–ø—É—Å–∫
async def on_startup(dp):
    await dp.bot.set_my_commands([
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand("explain", "–û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–≤–æ"),
        BotCommand("cards", "–ö–∞—Ä—Ç–æ—á–∫–∏: –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏ –≥—Ä–µ—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ"),
        BotCommand("quiz", "–ù–µ–±–æ–ª—å—à–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ª–æ–≤–∞–º")
    ])

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
